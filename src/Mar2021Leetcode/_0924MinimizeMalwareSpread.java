package Mar2021Leetcode;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

public class _0924MinimizeMalwareSpread {

	public static void main(String[] args) {
		System.out.println(
				minMalwareSpread(new int[][] { new int[] { 1, 1, 0 }, new int[] { 1, 1, 0 }, new int[] { 0, 0, 1 } },
						new int[] { 0, 1 }));

		System.out.println(
				minMalwareSpread(new int[][] { new int[] { 1, 0, 0 }, new int[] { 0, 1, 0 }, new int[] { 0, 0, 1 } },
						new int[] { 0, 2 }));

		System.out.println(
				minMalwareSpread(new int[][] { new int[] { 1, 1, 1 }, new int[] { 1, 1, 1 }, new int[] { 1, 1, 1 } },
						new int[] { 1, 2 }));

		System.out.println(
				minMalwareSpread(new int[][] { new int[] { 1, 1, 0 }, new int[] { 1, 1, 1 }, new int[] { 0, 1, 1 } },
						new int[] { 0, 1 }));
	}

	public static int minMalwareSpread(int[][] graph, int[] initial) {
		HashMap<Integer, HashSet<Integer>> adjList = new HashMap<Integer, HashSet<Integer>>();

		for (int i = 0; i < graph.length; i++) {
			for (int j = 0; j < graph[i].length; j++) {
				if (!adjList.containsKey(i)) {
					adjList.put(i, new HashSet<Integer>());
				}

				if (!adjList.containsKey(j)) {
					adjList.put(j, new HashSet<Integer>());
				}

				if (graph[i][j] == 1) {
					adjList.get(i).add(j);
					adjList.get(j).add(i);
				}
			}
		}

		int totalInfectedNode = getTotalInfectedNodes(adjList, initial, -1);
		int output = -1;
		int minInfectedNodes = totalInfectedNode;
		for (int i = 0; i < initial.length; i++) {
			int newInfectedNodes = getTotalInfectedNodes(adjList, initial, i);
			if (newInfectedNodes < minInfectedNodes) {
				output = initial[i];
				minInfectedNodes = newInfectedNodes;
			} else if (newInfectedNodes == minInfectedNodes && output == -1) {
				output = initial[i];
			}
		}
		return output;
	}

	public static int getTotalInfectedNodes(HashMap<Integer, HashSet<Integer>> adjList, int[] initial,
			int excludeNodes) {
		Queue<Integer> q = new LinkedList<Integer>();
		HashSet<Integer> visited = new HashSet<Integer>();
		for (int i = 0; i < initial.length; i++) {
			if (i != excludeNodes) {
				q.offer(initial[i]);
				visited.add(initial[i]);
			}
		}

		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				Integer node = q.poll();
				Iterator<Integer> iter = adjList.get(node).iterator();
				while (iter.hasNext()) {
					Integer neighbor = iter.next();

					if (!visited.contains(neighbor)) {
						q.offer(neighbor);
						visited.add(neighbor);
					}
				}
			}
		}
		return visited.size();
	}

}
