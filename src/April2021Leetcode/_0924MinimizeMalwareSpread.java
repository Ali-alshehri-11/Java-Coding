package April2021Leetcode;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class _0924MinimizeMalwareSpread {

	public static void main(String[] args) {
		System.out.println(
				minMalwareSpread(new int[][] { new int[] { 1, 1, 0 }, new int[] { 1, 1, 0 }, new int[] { 0, 0, 1 } },
						new int[] { 0, 1 }));

		System.out.println(
				minMalwareSpread(new int[][] { new int[] { 1, 0, 0 }, new int[] { 0, 1, 0 }, new int[] { 0, 0, 1 } },
						new int[] { 0, 2 }));

		System.out.println(
				minMalwareSpread(new int[][] { new int[] { 1, 1, 1 }, new int[] { 1, 1, 1 }, new int[] { 1, 1, 1 } },
						new int[] { 1, 2 }));

		System.out.println(
				minMalwareSpread(new int[][] { new int[] { 1, 1, 0 }, new int[] { 1, 1, 1 }, new int[] { 0, 1, 1 } },
						new int[] { 0, 1 }));
	}

	public static int minMalwareSpread(int[][] graph, int[] initial) {
		HashMap<Integer, ArrayList<Integer>> adjList = new HashMap<Integer, ArrayList<Integer>>();
		for (int i = 0; i < graph.length; i++) {
			for (int j = 0; j < graph[i].length; j++) {
				if (graph[i][j] == 1) {
					if (!adjList.containsKey(i)) {
						adjList.put(i, new ArrayList<Integer>());
					}

					adjList.get(i).add(j);
				}
			}
		}

		Arrays.sort(initial);
		int reach = getReach(adjList, initial, -1);
		int out = initial[0];
		for (int i = 0; i < initial.length; i++) {
			int newReach = getReach(adjList, initial, i);
			if (newReach < reach) {
				out = initial[i];
				reach = newReach;
			}
		}
		return out;
	}

	public static int getReach(HashMap<Integer, ArrayList<Integer>> adjList, int[] initial, int exclude) {
		Queue<Integer> q = new LinkedList<Integer>();

		HashSet<Integer> visited = new HashSet<Integer>();
		for (int i = 0; i < initial.length; i++) {
			if (i != exclude) {
				q.offer(initial[i]);
				visited.add(initial[i]);
			}
		}

		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				Integer node = q.poll();
				List<Integer> list = adjList.get(node);
				for (Integer neighborNode : list) {
					if (!visited.contains(neighborNode)) {
						visited.add(neighborNode);
						q.offer(neighborNode);
					}
				}
			}
		}
		return visited.size();
	}

}
